<!-- $project-title: Checklist Inspector -->
<!-- $project-title-icon: <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50"><style type="text/css">  
	
</style><polygon class="svg-triangle-fill" points="1.7 44 25 3.7 48.3 44 "/><path class="svg-triangle-stroke" d="M25 5.7L46.5 43H3.5L25 5.7M25 1.7L0 45h50L25 1.7 25 1.7z"/></svg> -->

<!-- @include header -->

<!-- @include _project.kit -->
			<p>
				Checklist Inspector is an iOS app developed to help make inspections quicker and easier. It works alongside Site Audit Pro. Users can create templates, categories of questions, and carry out inspections that capture all kinds of  of data, and then output this in a professional report.
			</p>

			<p>I have worked on this product as the sole designer from its initial stages of idea generation, all the way through to its final delivery and continued maintenance and updates.</p>

			<h2>Building Solid Foundations</h2>
			<p>
				I started creating a product that built on existing iOS user patterns, enabling users to easily pick up the product and get to work, without having to learn anything new. Custom elements were essential throughout, but they were never used for novelty, only to carry out essential actions.
			</p>
			
			<figure>
			<img src="img/ci-scoring.png" class="project-image img-responsive" alt="Screenshot of Checklist Inspector's Scoring Controls"/>
			<figcaption>Customising iOS segmented controls meant users were familiar with the interface and knew how to interact with it</figcaption>
			</figure>

			<p>It was also very important to ensure target areas for buttons and inputs were large enough to afford for users working in sub-optimal conditions, in these cases I kept in mind the mantra, <span class="italic">‘form follows function’</span>, I learned from my design school mentors.</p>

			<figure>
			<img src="img/ci-annotate.jpg" class="project-image img-responsive"/ alt="Screenshot of Checklist Inspector's Image Annotation Screen">
			<figcaption>Controls are easily accessible when it matters, we mustn’t forget to afford for sub-optimal conditions</figcaption>
			</figure>


			<h2>The Design Process</h2>
			<p>My process consisted of initial pen and paper wireframes, low and high fidelity prototypes, followed by a full fidelity designs for all screens and elements, including full specifications for handover to the development team. Working with the development team was an invaluable experience on this product, getting real hands-on experiencing working with xCode, understanding the way a user interface is built and connected to the inner workings. I was able to update and maintain the interface of the product using Xcode for each major iOS release, which meant the development team could focus on the backend, meaning a shorter release cycle for our users.</p>

			<figure>
			<img src="img/ci-graphs.jpg" class="project-image img-responsive" alt="Screenshot of Checklist Inspector's Analytics Overview"/>
			<figcaption>The design utilises iOS standard elements, with a healthy helping of customisation for complex areas.</figcaption>
			</figure>


			<h2>Expanding The Product</h2>
			<p>As part of the Checklist Inspector product, I also designed and produced an online template builder system. This simple tool allows users to create and share inspection templates online on a laptop or desktop, where they may be more comfortable inputting large amounts of data. </p>

			<figure>
			<img src="img/ci-templatebuilder.jpg" class="project-image img-responsive" alt="Screenshot of the online Checklist Inspector template builder"/>
			<figcaption>Checklist Inspector Template Builder (<a href="www.templatebuilder.veamstudios.com" target="blank" title="Visit the Checklist Inspector Template Builder">templatebuilder.veamstudios.com</a>)</figcaption>
			</figure>

			<p>Building on a simple bootstrap foundation, I utilised jQuery for the template file generation from user input, PHP for downloads and email sharing, and HTML5 Data Blob for user file upload and parsing. 
			In short, user input is parsed as pre-formatted XML, which is then output as a custom .plist file, which can then be parsed by the Checklist Inspector iOS app to create an in-app template.</p>

			<p>The template builder has boosted engagement, it allows users to engage with the iOS app using a different platform, creating a unified and flexible experience. This was a great learning experience, and has allowed me to keep my HTML, CSS and jQuery skills refined, which comes in very useful when creating prototypes and mockups.</p>


			<h2>Learning From Experience</h2>
			<p>Shortly after launch, it became evident, from user feedback, that certain areas were not performing as best they could. From this feedback, key data input areas were streamlined and made simpler, with more powerful features moved offscreen to modal views. </p>

			<figure>
			<img src="img/ci-comparison.jpg" class="project-image img-responsive" alt="Comparison of the Checklist Inspector 'test' page before and after simplification"/>
			<figcaption>Before (left) and after (right). Simplifying this often seen interface meant less cognitive load on the user.</figcaption>
			</figure>

			<p>This was a key learning point for me, learning about a product I had designed directly from the users who were working with it every day. This process reinforced the power of listening. It was tough at first, my ego took a hit, but really listening to the real people using the product, not just cherry-picking the positives, enabled the product to grow in a positive direction. This process taught me a valuable lesson in the importance of a constantly evolving product.</p>

			<p>You can find Checklist Inspector in the <a href="https://itunes.apple.com/gb/app/checklist-inspector-auditing/id740219026?mt=8" title="Check out Checklist Inspector on the iOS App Store" target="_blank">iOS App Store</a>.</p>




		</div><!-- /col -->
	</div><!-- /row -->

	<div class="row other-work-head">
		<div class="col-xs-12">
		Other Selected Work:
		</div>
	</div>


	<!-- @include projectPanel_SAP -->
	<!-- @include projectPanel_Enterprise -->

	<!-- @include projectPanel_Birkbeck -->

	<!-- @include projectPanel_VeamWebsite -->




<!-- @include footer -->